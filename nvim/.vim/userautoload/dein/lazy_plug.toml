[[plugins]]
repo = 'alpaca-tc/vim-endwise.git'
on_ft = ['ruby']
hook_add = '''
  let g:endwise_no_mappings=1
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
on_event = 'BufRead'
hook_post_update = "TSUpdate"
hook_source ='''
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {"c", "rust", "go", "lua", "python"},
  sync_install = false,
  auto_install = true,
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
}
EOF
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
hook_source = '''
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-q>   <Cmd>call pum#map#cancel()<CR>

cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

" tnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
" tnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

call pum#set_option('use_complete', v:true)
call pum#set_option({ 'border': 'rounded' })
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
depends = ['denops.vim']
hook_source = '''
call ddc#enable()
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'vsnip'])
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank']
      \ },
      \ 'around': {
      \   'mark': 'around' 
      \ },
      \ 'nvim-lsp': {
      \   'mark': 'lsp',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' 
      \ }
      \ })
call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])
'''

#[[plugins]]
#repo = 'vim-skk/skkeleton'
#on_event = ['InsertEnter', 'CmdlineEnter']
#depends = ['denops.vim']
#hook_add = '''
#imap <C-j> <Plug>(skkeleton-toggle)
#cmap <C-j> <Plug>(skkeleton-toggle)
#
#function! s:skkeleton_init() abort
#    call skkeleton#config({
#        \   'eggLikeNewline': v:true,
#        \   'globalDictionaries': [["/usr/share/skk/SKK-JISYO.L", "euc-jp"],["/usr/share/skk-emoji-jisyo/SKK-JISYO.emoji.utf8", "utf-8"],["/usr/share/skk-emoji-jisyo-ja/SKK-JISYO.emoji-ja.utf8", "utf-8"]],
#        \   'useSkkServer': v:true,
#        \   'completionRankFile': '~/.skkeleton/rank.json',
#        \   'registerConvertResult': v:true,
#        \   'markerHenkan': '',
#        \   'markerHenkanSelect': ''
#        \ })
#endfunction
#
#augroup skkeleton-initialize-pre
#    autocmd!
#    autocmd User skkeleton-initialize-pre call s:skkeleton_init()
#augroup END
#'''

#[[plugins]]
#repo = 'delphinus/skkeleton_indicator.nvim'
#on_source = 'skkeleton'
#lua_source = '''
#    require("skkeleton_indicator").setup()
#'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_lua = 'cmp_nvim_lsp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_lua = 'cmp'
on_cmd = 'Cmp'
lua_source = '''
local cmp = require('cmp')

-- Global setup.
cmp.setup {
  enabled = function()
    return vim.g.cmp
  end,
  experimental = {
    ghost_text = true,
  },
  snippet = {
    expand = function(args)
      vim.fn['vsnip#anonymous'](args.body) -- For `vsnip` users.
    end,
  },
  window = {
    completion = cmp.config.window.bordered {
      border = 'single',
    },
    documentation = cmp.config.window.bordered {
      border = 'single',
    },
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
  },
}

cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
})
'''

[[plugins]]
repo = 'tamago324/cmp-zsh'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'uga-rosa/cmp-skkeleton'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_source = '''
let g:vsnip_snippet_dirs = [$HOME .. "/.vim/snippets", dein#get('completion-snippet').path]
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-vsnip'
on_source = ['ddc.vim', 'cmp-vsnip']

[[plugins]]
repo = 'hrsh7th/completion-snippet'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

#[[plugins]]
#repo = 'raghur/vim-ghost'
#hook_post_source = "GhostInstall"

[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'

[[plugins]]
repo = 'petertriho/nvim-scrollbar'
on_event = [
    "BufWinEnter",
    "CmdwinLeave",
    "TabEnter",
    "TermEnter",
    "TextChanged",
    "VimResized",
    "WinEnter",
    "WinScrolled",
]
hook_source = '''
lua << EOF
require("scrollbar").setup()
EOF
'''

