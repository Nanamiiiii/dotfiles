[[plugins]]
repo = 'arcticicestudio/nord-vim'
hook_add = '''
colorscheme nord
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'akinsho/bufferline.nvim'
hook_add = '''
lua << EOF
require("bufferline").setup{}
EOF
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = ['nvim-web-devicons']
hook_add = '''
lua << EOF
require('lualine').setup {
    options = { theme = 'nord' }
}
EOF
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'vimsence/vimsence'

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-neo-tree/neo-tree.nvim'
depends = ['nui.nvim', 'plenary.nvim', 'nvim-web-devicons']
hook_add = '''
lua << EOF
require('neo-tree').setup {
  filesystem = {
    filtered_items = {
      visible = false, -- when true, they will just be displayed differently than normal items
      hide_dotfiles = false,
      hide_gitignored = false,
      hide_hidden = false, -- only works on Windows for hidden files/directories
      hide_by_name = {
        --"node_modules"
      },
      hide_by_pattern = { -- uses glob style patterns
        --"*.meta",
        --"*/src/*/tsconfig.json",
      },
      always_show = { -- remains visible even if other settings would normally hide it
        --".gitignored",
      },
      never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show
        --".DS_Store",
        --"thumbs.db"
      },
      never_show_by_pattern = { -- uses glob style patterns
        --".null-ls_*",
      },
    },
    follow_current_file = false, -- This will find and focus the file in the active buffer every
                                 -- time the current file is changed while the tree is open.
    group_empty_dirs = false, -- when true, empty folders will be grouped together
    hijack_netrw_behavior = "open_default", -- netrw disabled, opening a directory opens neo-tree
                                            -- in whatever position is specified in window.position
                          -- "open_current",  -- netrw disabled, opening a directory opens within the
                                            -- window like netrw would, regardless of window.position
                          -- "disabled",    -- netrw left alone, neo-tree does not handle opening dirs
    use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes
                                    -- instead of relying on nvim autocmd events.
    window = {
      mappings = {
        ["<bs>"] = "navigate_up",
        ["."] = "set_root",
        ["H"] = "toggle_hidden",
        ["/"] = "fuzzy_finder",
        ["D"] = "fuzzy_finder_directory",
        ["f"] = "filter_on_submit",
        ["<c-x>"] = "clear_filter",
        ["[g"] = "prev_git_modified",
        ["]g"] = "next_git_modified",
      }
    }
  },
  buffers = {
    follow_current_file = true, -- This will find and focus the file in the active buffer every
                                 -- time the current file is changed while the tree is open.
    group_empty_dirs = true, -- when true, empty folders will be grouped together
    show_unloaded = true,
    window = {
      mappings = {
        ["bd"] = "buffer_delete",
        ["<bs>"] = "navigate_up",
        ["."] = "set_root",
      }
    }
  }
}
EOF
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Neotree | endif
nnoremap <silent><C-t> :Neotree toggle<CR>
'''

#[[plugins]]
#repo = "kristijanhusak/defx-git"
#hook_add = '''
#call defx#custom#column('git', 'column_length', 2)
#call defx#custom#column('git', 'indicators', {
#    \ 'Modified'  : '✹',
#    \ 'Staged'    : '✚',
#    \ 'Untracked' : '✭',
#    \ 'Renamed'   : '➜',
#    \ 'Unmerged'  : '═',
#    \ 'Ignored'   : '☒',
#    \ 'Deleted'   : '✖',
#    \ 'Unknown'   : '?'
#    \ })
#'''
#
#[[plugins]]
#repo = "kristijanhusak/defx-icons"
#
#[[plugins]]
#repo = 'Shougo/defx.nvim'
#depends = ['defx-git', 'defx-icons']
#hook_add = '''
#let g:defx_icons_enable_syntax_highlight = 0
#let g:defx_icons_column_length = 2
#let g:defx_icons_directory_icon = ''
#let g:defx_icons_mark_icon = '*'
#let g:defx_icons_copy_icon = ''
#let g:defx_icons_move_icon = ''
#let g:defx_icons_parent_icon = ''
#let g:defx_icons_default_icon = ''
#let g:defx_icons_directory_symlink_icon = ''
#let g:defx_icons_root_opened_tree_icon = ''
#let g:defx_icons_nested_opened_tree_icon = ''
#let g:defx_icons_nested_closed_tree_icon = ''
#
#call defx#custom#column('icon', {
#    \ 'directory_icon': '▸',
#    \ 'opened_icon': '▾',
#    \ 'root_icon': ' ',
#    \ })
#
#call defx#custom#column('filename', {
#    \ 'min_width': 40,
#    \ 'max_width': 40,
#    \ })
#
#call defx#custom#column('mark', {
#    \ 'readonly_icon': '✗',
#    \ 'selected_icon': '✓',
#    \ })
#
#call defx#custom#option('_', {
#    \ 'columns': 'indent:git:icons:filename:type:size:time',
#    \ 'show_ignored_files': 1,
#    \ 'toggle': 1,
#    \ 'resume': 1,
#    \ 'buffer_name': 'defx',
#    \ })
#
#autocmd FileType defx call s:defx_my_settings()
#    function! s:defx_my_settings() abort
#        " Define mappings
#        nnoremap <silent><buffer><expr> <CR>
#        \ defx#do_action('drop')
#        nnoremap <silent><buffer><expr> c
#        \ defx#do_action('copy')
#        nnoremap <silent><buffer><expr> m
#        \ defx#do_action('move')
#        nnoremap <silent><buffer><expr> p
#        \ defx#do_action('paste')
#        nnoremap <silent><buffer><expr> l
#        \ defx#do_action('drop')
#        nnoremap <silent><buffer><expr> E
#        \ defx#do_action('open', 'vsplit')
#        nnoremap <silent><buffer><expr> P
#        \ defx#do_action('preview')
#        nnoremap <silent><buffer><expr> o
#        \ defx#do_action('open_tree', 'toggle')
#        nnoremap <silent><buffer><expr> K
#        \ defx#do_action('new_directory')
#        nnoremap <silent><buffer><expr> N
#        \ defx#do_action('new_file')
#        nnoremap <silent><buffer><expr> M
#        \ defx#do_action('new_multiple_files')
#        nnoremap <silent><buffer><expr> C
#        \ defx#do_action('toggle_columns',
#        \                'mark:indent:icon:filename:type:size:time')
#        nnoremap <silent><buffer><expr> S
#        \ defx#do_action('toggle_sort', 'time')
#        nnoremap <silent><buffer><expr> d
#        \ defx#do_action('remove')
#        nnoremap <silent><buffer><expr> r
#        \ defx#do_action('rename')
#        nnoremap <silent><buffer><expr> !
#        \ defx#do_action('execute_command')
#        nnoremap <silent><buffer><expr> x
#        \ defx#do_action('execute_system')
#        nnoremap <silent><buffer><expr> yy
#        \ defx#do_action('yank_path')
#        nnoremap <silent><buffer><expr> .
#        \ defx#do_action('toggle_ignored_files')
#        nnoremap <silent><buffer><expr> ;
#        \ defx#do_action('repeat')
#        nnoremap <silent><buffer><expr> h
#        \ defx#do_action('cd', ['..'])
#        nnoremap <silent><buffer><expr> ~
#        \ defx#do_action('cd')
#        nnoremap <silent><buffer><expr> q
#        \ defx#do_action('quit')
#        nnoremap <silent><buffer><expr> <Space>
#        \ defx#do_action('toggle_select') . 'j'
#        nnoremap <silent><buffer><expr> *
#        \ defx#do_action('toggle_select_all')
#        nnoremap <silent><buffer><expr> j
#        \ line('.') == line('$') ? 'gg' : 'j'
#        nnoremap <silent><buffer><expr> k
#        \ line('.') == 1 ? 'G' : 'k'
#        nnoremap <silent><buffer><expr> <C-l>
#        \ defx#do_action('redraw')
#        nnoremap <silent><buffer><expr> <C-g>
#        \ defx#do_action('print')
#        nnoremap <silent><buffer><expr> cd
#        \ defx#do_action('change_vim_cwd')
#    endfunction
#
#autocmd BufWritePost * call defx#redraw()
#autocmd BufEnter * call defx#redraw()
#
#autocmd StdinReadPre * let s:std_in=1
#autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Defx | endif
#nnoremap <silent><C-t> :<C-u> Defx<CR>
#
#'''

[[plugins]]
repo = 'tpope/vim-fugitive'

